trigger:
  branches:
    include:
      - main

pool:
  name: Default  
  demands:
    - Agent.OS -equals Linux

variables:
  SYSTEM_DEBUG: true  # Verbose Logging
  azureSubscription: 'taskvantage'
  frontendAppService: 'taskvantage-frontend'
  backendAppService: 'taskvantage-backend'
  backendPath: '/home/quigonwhiskey/agents/myagent/_work/1/s/backend'
  backendJar: '$(backendPath)/target/*.jar'
  SPRING_PROFILES_ACTIVE: 'prod'
  firebaseConfigFileName: 'taskvantage-c1425-firebase-adminsdk-yc2y8-9cbc07dcdf.json'
  firebaseConfigPath: '$(backendPath)/src/main/resources/$(firebaseConfigFileName)'
  azure.cognitive.endpoint: 'https://taskvantage-cognitive.openai.azure.com/'
  azure.cognitive.apiKey: '$(AZURE_COGNITIVE_APIKEY)'

stages:
  - stage: Build_And_Deploy_Frontend
    jobs:
      - job: Build_And_Deploy_Frontend
        displayName: 'Build and Deploy Angular Frontend'
        steps:
          - checkout: self
            clean: true
            fetchDepth: 1
            displayName: 'Checkout Latest Commit'

          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: 'Install Node.js 20.x'

          - script: |
              echo "Sourcing ~/.bashrc to load environment variables..."
              source ~/.bashrc || echo "Failed to source ~/.bashrc"
              echo "Step 1: Navigating to frontend directory..."
              cd $(System.DefaultWorkingDirectory)/frontend/task-manager

              echo "Step 2: Installing npm dependencies..."
              npm install
            displayName: 'Navigate to Frontend Directory and Install NPM Dependencies'

          - script: |
              echo "Sourcing ~/.bashrc to load environment variables..."
              source ~/.bashrc || echo "Failed to source ~/.bashrc"
              echo "Step 3: Building Angular app..."
              cd $(System.DefaultWorkingDirectory)/frontend/task-manager
              npm run build --prod || (echo "Build failed" && exit 1)
            displayName: 'Build Angular app'

          - script: |
              echo "Moving files from browser directory to dist..."
              cd $(System.DefaultWorkingDirectory)/frontend/task-manager/dist/task-manager
              mv browser/* . || echo "No files to move"
              rm -rf browser || echo "No browser folder to delete"
              echo "Files moved and browser folder cleaned up."
            displayName: 'Prepare Angular Build for Deployment'

          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appName: '$(frontendAppService)'
              package: '$(System.DefaultWorkingDirectory)/frontend/task-manager/dist/task-manager'
              appType: 'webApp'
            displayName: 'Deploy Angular app to Azure App Service'

  - stage: Build_And_Deploy_Backend
    dependsOn: Build_And_Deploy_Frontend
    jobs:
      - job: Build_Backend
        displayName: 'Build and Deploy Spring Boot Backend'
        steps:
          - checkout: self
            clean: true
            fetchDepth: 1
            displayName: 'Checkout Latest Commit'

          - task: DownloadSecureFile@1
            name: DownloadFirebaseConfig
            inputs:
              secureFile: '$(firebaseConfigFileName)'

          - script: |
              echo "Sourcing ~/.bashrc to load environment variables..."
              source ~/.bashrc || echo "Failed to source ~/.bashrc"
              echo Writing Firebase JSON config to resources directory...
              mkdir -p $(backendPath)/src/main/resources
              cp $(Agent.TempDirectory)/$(firebaseConfigFileName) $(firebaseConfigPath)
              echo Firebase JSON file is written to $(firebaseConfigPath)
              echo ##vso[task.setvariable variable=FIREBASE_CONFIG_PATH]$(firebaseConfigPath)
              echo "FIREBASE_CONFIG_PATH is set to $(FIREBASE_CONFIG_PATH)"
            displayName: 'Write Firebase Config to Resources Directory'

          - script: |
              echo "Checking backend directory contents..."
              ls -la $(backendPath)
            displayName: 'Verify Backend Directory'

          # Build Backend Skipping Tests
          - script: |
              echo "Building Spring Boot app (skipping tests)..."
              mvn -f $(backendPath)/pom.xml clean package -DskipTests
            displayName: 'Build Spring Boot App (Skip Tests)'

          - script: |
              echo "Checking built JAR file..."
              ls -la $(backendJar)
            displayName: 'Verify Backend Build Artifacts'

          # Production build for deployment
          - script: |
              echo "Building production JAR..."
              mvn -f $(backendPath)/pom.xml clean package \
                  -Dspring.profiles.active=prod \
                  -DskipTests
            displayName: 'Build Production JAR'

          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appName: '$(backendAppService)'
              package: '$(backendJar)'
              appType: 'webApp'
              appSettings: '-SPRING_PROFILES_ACTIVE prod -DB_URL "$(DB_URL)" -DB_USERNAME "$(DB_USERNAME)" -DB_PASSWORD "$(DB_PASSWORD)"'