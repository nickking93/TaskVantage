trigger:
  branches:
    include:
      - main

pool:
  name: Default  # Replace with your Linux self-hosted agent pool name
  demands:
    - Agent.OS -equals Linux

variables:
  SYSTEM_DEBUG: true  # Consider disabling this in production for less verbose logs
  azureSubscription: 'taskvantage'
  frontendAppService: 'taskvantage-frontend'
  backendAppService: 'taskvantage-backend'
  backendPath: '/home/quigonwhiskey/agents/myagent/_work/1/s/backend'
  backendJar: '$(backendPath)/target/*.jar'
  SPRING_PROFILES_ACTIVE: 'prod'
  firebaseConfigFileName: 'taskvantage-c1425-firebase-adminsdk-yc2y8-9cbc07dcdf.json'
  firebaseConfigPath: '$(backendPath)/src/main/resources/$(firebaseConfigFileName)'
  azure.cognitive.endpoint: 'https://taskvantage-cognitive.openai.azure.com/'
  azure.cognitive.apiKey: '$(AZURE_COGNITIVE_APIKEY)'

stages:
  - stage: Build_And_Deploy_Frontend
    jobs:
      - job: Build_And_Deploy_Frontend
        displayName: 'Build and Deploy Angular Frontend'
        steps:
          - checkout: self
            clean: false
            fetchDepth: 1
            displayName: 'Checkout Latest Commit'

          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: 'Install Node.js 20.x'

          - script: |
              echo "Sourcing ~/.bashrc to load environment variables..."
              source ~/.bashrc || echo "Failed to source ~/.bashrc"
              echo "Step 1: Navigating to frontend directory..."
              cd $(System.DefaultWorkingDirectory)/frontend/task-manager

              echo "Step 2: Installing npm dependencies..."
              npm install
            displayName: 'Navigate to Frontend Directory and Install NPM Dependencies'

          - script: |
              echo "Sourcing ~/.bashrc to load environment variables..."
              source ~/.bashrc || echo "Failed to source ~/.bashrc"
              echo "Step 3: Building Angular app..."
              cd $(System.DefaultWorkingDirectory)/frontend/task-manager
              npm run build --prod || (echo "Build failed" && exit 1)
            displayName: 'Build Angular app'

          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appName: '$(frontendAppService)'
              package: '$(System.DefaultWorkingDirectory)/frontend/task-manager/dist/task-manager'
              appType: 'webApp'
            displayName: 'Deploy Angular app to Azure App Service'

  - stage: Build_And_Deploy_Backend
    dependsOn: Build_And_Deploy_Frontend
    jobs:
      - job: Build_Backend
        displayName: 'Build and Deploy Spring Boot Backend'
        steps:
          - checkout: self
            clean: false
            fetchDepth: 1
            displayName: 'Checkout Latest Commit'

          - task: DownloadSecureFile@1
            name: DownloadFirebaseConfig
            inputs:
              secureFile: '$(firebaseConfigFileName)'

          - script: |
              echo "Sourcing ~/.bashrc to load environment variables..."
              source ~/.bashrc || echo "Failed to source ~/.bashrc"
              echo Writing Firebase JSON config to resources directory...
              mkdir -p $(backendPath)/src/main/resources
              cp $(Agent.TempDirectory)/$(firebaseConfigFileName) $(firebaseConfigPath)
              echo Firebase JSON file is written to $(firebaseConfigPath)
              echo ##vso[task.setvariable variable=FIREBASE_CONFIG_PATH]$(firebaseConfigPath)
              echo FIREBASE_CONFIG_PATH is set to $(FIREBASE_CONFIG_PATH)
            displayName: 'Write Firebase Config to Resources Directory'

          - script: |
              echo "Checking backend directory contents..."
              ls -la $(backendPath)
            displayName: 'Verify Backend Directory'

          # Build Backend Skipping Tests
          - script: |
              echo "Building Spring Boot app (skipping tests)..."
              mvn -f $(backendPath)/pom.xml clean package -DskipTests
            displayName: 'Build Spring Boot App (Skip Tests)'

          - script: |
              echo "Checking built JAR file..."
              ls -la $(backendJar)
            displayName: 'Verify Backend Build Artifacts'

          # Production build for deployment
          - script: |
              echo "Building production JAR..."
              mvn -f $(backendPath)/pom.xml clean package \
                  -Dspring.profiles.active=prod \
                  -DskipTests
            displayName: 'Build Production JAR'
            env:
              DB_URL: $(DB_URL)
              DB_USERNAME: $(DB_USERNAME)
              DB_PASSWORD: $(DB_PASSWORD)
              FIREBASE_CONFIG_PATH: $(firebaseConfigPath)
              SPRING_PROFILES_ACTIVE: prod
              azure.cognitive.endpoint: $(azure.cognitive.endpoint)
              azure.cognitive.apiKey: $(azure.cognitive.apiKey)

          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appName: '$(backendAppService)'
              package: '$(backendJar)'
              appType: 'webApp'

          - task: AzureCLI@2
            displayName: 'Update App Settings via Azure CLI'
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az webapp config appsettings set \
                  --name "$(backendAppService)" \
                  --resource-group "TaskVantage" \
                  --settings \
                  spring.datasource.url="$(DB_URL)" \
                  spring.datasource.username="$(DB_USERNAME)" \
                  'spring.datasource.password=$(DB_PASSWORD)' \
                  FIREBASE_CONFIG_PATH="src/main/resources/$(firebaseConfigFileName)" \
                  azure.cognitive.endpoint="$(azure.cognitive.endpoint)" \
                  azure.cognitive.apiKey="$(azure.cognitive.apiKey)" \
                  JAVA_OPTS="-Duser.timezone=UTC"