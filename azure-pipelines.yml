trigger:
  branches:
    include:
      - main

pool:
  name: Default
  demands:
    - Agent.OS -equals Linux

variables:
  SYSTEM_DEBUG: true
  azureSubscription: 'taskvantage'
  frontendAppService: 'taskvantage-frontend'
  backendAppService: 'taskvantage-backend'
  backendPath: '$(Agent.BuildDirectory)/s/backend'
  backendJar: '$(backendPath)/target/*.jar'
  SPRING_PROFILES_ACTIVE: 'prod'
  firebaseConfigFileName: 'taskvantage-c1425-firebase-adminsdk-yc2y8-9cbc07dcdf.json'
  firebaseConfigPath: '$(backendPath)/src/main/resources/$(firebaseConfigFileName)'

stages:
  - stage: Build_And_Deploy_Frontend
    jobs:
      - job: Build_And_Deploy_Frontend
        displayName: 'Build and Deploy Angular Frontend'
        steps:
          - checkout: self
            clean: false
            fetchDepth: 1
            displayName: 'Checkout Latest Commit'

          - task: NodeTool@0
            inputs:
              versionSpec: '20.x' 
            displayName: 'Install Node.js 20.x'

          - script: |
              source ~/.bashrc || echo "Failed to source ~/.bashrc"
              cd $(Agent.BuildDirectory)/s/frontend/task-manager
              npm install
            displayName: 'Install NPM Dependencies'

          - script: |
              cd $(Agent.BuildDirectory)/s/frontend/task-manager
              npm run build --prod
            displayName: 'Build Angular App'

          - script: |
              echo "Current directory:"
              pwd
              echo "Listing dist directory before move:"
              ls -la $(Agent.BuildDirectory)/s/frontend/task-manager/dist/task-manager
              echo "Moving files from browser directory..."
              cd $(Agent.BuildDirectory)/s/frontend/task-manager/dist/task-manager
              if [ -d "browser" ]; then
                mv browser/* . && rm -rf browser && echo "Files moved successfully"
              else
                echo "ERROR: browser directory not found!"
                exit 1
              fi
              echo "Final contents of dist directory:"
              ls -la
              echo "Checking for critical files:"
              if [ ! -f "index.html" ]; then
                echo "ERROR: index.html not found!"
                exit 1
              fi
            displayName: 'Prepare Angular Build for Deployment'

          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appName: '$(frontendAppService)'
              package: '$(Agent.BuildDirectory)/s/frontend/task-manager/dist/task-manager'
              appType: 'webApp'
            displayName: 'Deploy Angular App'

  - stage: Build_And_Deploy_Backend
    dependsOn: Build_And_Deploy_Frontend
    jobs:
      - job: Build_Backend
        displayName: 'Build and Deploy Spring Boot Backend'
        steps:
          - checkout: self
            clean: false
            fetchDepth: 1
            displayName: 'Checkout Latest Commit'

          - task: DownloadSecureFile@1
            name: DownloadFirebaseConfig
            inputs:
              secureFile: '$(firebaseConfigFileName)'

          - script: |
              mkdir -p $(backendPath)/src/main/resources
              cp $(Agent.TempDirectory)/$(firebaseConfigFileName) $(firebaseConfigPath)
              echo ##vso[task.setvariable variable=FIREBASE_CONFIG_PATH]$(firebaseConfigPath)
            displayName: 'Setup Firebase Config'

          - script: |
              source ~/.bashrc || echo "Failed to source ~/.bashrc"
              printenv | grep -i "db\|firebase\|azure"
              mvn -f $(backendPath)/pom.xml clean package \
                  -Dspring.profiles.active=test \
                  -Dtest=!BackendApplicationTests,!SentenceEmbeddingClientIntegrationTest \
                  -Dspring.datasource.url=jdbc:h2:mem:testdb \
                  -Dspring.jpa.database-platform=org.hibernate.dialect.H2Dialect \
                  -Dspring.datasource.username=sa \
                  -Dspring.datasource.password= \
                  -Dspring.datasource.driver-class-name=org.h2.Driver \
                  -Dspring.jpa.hibernate.ddl-auto=create-drop \
                  -Dspring.jpa.show-sql=true \
                  -Dspring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false
            displayName: 'Build and Test Spring Boot App'
            env:
              AZURE_COGNITIVE_APIKEY: $(AZURE_COGNITIVE_APIKEY_SECRET)
              AZURE_COGNITIVE_ENDPOINT: $(AZURE_COGNITIVE_ENDPOINT_SECRET)
              FIREBASE_CONFIG_PATH: $(firebaseConfigPath)
              SPRING_PROFILES_ACTIVE: test
              JWT_SECRET: $(JWT_SECRET)

          - script: |
              mvn -f $(backendPath)/pom.xml clean package -Dspring.profiles.active=prod -DskipTests
            displayName: 'Build Production JAR'
            env:
              AZURE_COGNITIVE_APIKEY: $(AZURE_COGNITIVE_APIKEY_SECRET)
              AZURE_COGNITIVE_ENDPOINT: $(AZURE_COGNITIVE_ENDPOINT_SECRET)

          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appName: '$(backendAppService)'
              package: '$(backendJar)'
              appType: 'webApp'

          - task: AzureAppServiceSettings@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              resourceGroupName: 'TaskVantage'
              appName: '$(backendAppService)'
              appSettings: |
                {
                  "spring.datasource.url": "$(DB_URL)",
                  "spring.datasource.username": "$(DB_USERNAME)",
                  "spring.datasource.password": "$(DB_PASSWORD)",
                  "FIREBASE_CONFIG_PATH": "$(firebaseConfigFileName)",
                  "AZURE_COGNITIVE_APIKEY": "$(AZURE_COGNITIVE_APIKEY_SECRET)",
                  "AZURE_COGNITIVE_ENDPOINT": "$(AZURE_COGNITIVE_ENDPOINT_SECRET)",
                  "JWT_SECRET": "$(JWT_SECRET)"
                }
            displayName: 'Configure Azure App Settings'