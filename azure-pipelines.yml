trigger:
  branches:
    include:
      - main

pool:
  name: Default  # Replace with your Linux self-hosted agent pool name
  demands:
    - Agent.OS -equals Linux

variables:
  SYSTEM_DEBUG: true  # Consider disabling this in production for less verbose logs
  azureSubscription: 'taskvantage'
  frontendAppService: 'taskvantage-frontend'
  backendAppService: 'taskvantage-backend'
  backendPath: '/home/azure-agent/_work/1/s/backend'
  backendJar: '$(backendPath)/target/*.jar'
  SPRING_PROFILES_ACTIVE: 'prod'
  firebaseConfigFileName: 'taskvantage-c1425-firebase-adminsdk-yc2y8-9cbc07dcdf.json'
  firebaseConfigPath: '$(backendPath)/src/main/resources/$(firebaseConfigFileName)'

stages:
  - stage: Build_And_Deploy_Frontend
    jobs:
      - job: Build_And_Deploy_Frontend
        displayName: 'Build and Deploy Angular Frontend'
        steps:
          - checkout: self
            clean: false
            fetchDepth: 1
            displayName: 'Checkout Latest Commit'

          - task: NodeTool@0
            inputs:
              versionSpec: '20.x' 
            displayName: 'Install Node.js 20.x'

          - script: |
              echo "Step 1: Navigating to frontend directory..."
              cd $(Agent.BuildDirectory)/frontend/task-manager

              echo "Step 2: Installing npm dependencies..."
              npm install
            displayName: 'Navigate to Frontend Directory and Install NPM Dependencies'
          
          # This step is optional if firebase and @angular/fire are already in package.json
          - script: npm install firebase @angular/fire --save
            displayName: 'Install Firebase and AngularFire'

          - script: |
              echo "Step 3: Building Angular app..."
              cd $(Agent.BuildDirectory)/frontend/task-manager
              npm run build --prod || (echo "Build failed" && exit 1)
            displayName: 'Build Angular app'

          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appName: '$(frontendAppService)'
              package: '$(Agent.BuildDirectory)/frontend/task-manager/dist/task-manager/browser'
              appType: 'webApp'
            displayName: 'Deploy Angular app to Azure App Service'

  - stage: Build_And_Deploy_Backend
    dependsOn: Build_And_Deploy_Frontend
    jobs:
      - job: Build_Backend
        displayName: 'Build and Deploy Spring Boot Backend'
        steps:
          - checkout: self
            clean: false
            fetchDepth: 1
            displayName: 'Checkout Latest Commit'

          - task: DownloadSecureFile@1
            name: DownloadFirebaseConfig
            inputs:
              secureFile: '$(firebaseConfigFileName)'

          - script: |
              echo Writing Firebase JSON config to resources directory...
              mkdir -p $(backendPath)/src/main/resources
              cp $(Agent.TempDirectory)/$(firebaseConfigFileName) $(firebaseConfigPath)
              echo Firebase JSON file is written to $(firebaseConfigPath)
              echo ##vso[task.setvariable variable=FIREBASE_CONFIG_PATH]$(firebaseConfigPath)
              echo FIREBASE_CONFIG_PATH is set to $(FIREBASE_CONFIG_PATH)
            displayName: 'Write Firebase Config to Resources Directory'

          - task: Maven@4
            inputs:
              mavenPomFile: '$(backendPath)/pom.xml'
              mavenOptions: '-Xmx3072m'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '17'
              jdkArchitectureOption: 'x64'
              goals: 'clean package -Dspring.profiles.active=$(SPRING_PROFILES_ACTIVE)'
            displayName: 'Build Spring Boot app'

          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appName: '$(backendAppService)'
              package: '$(backendJar)'
              appType: 'webApp'

          - task: AzureAppServiceSettings@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              resourceGroupName: 'TaskVantage'
              appName: '$(backendAppService)'
              appSettings: |
                {
                  "spring.datasource.url": "$(dbUrl)",
                  "spring.datasource.username": "$(dbUsername)",
                  "spring.datasource.password": "$(dbPassword)",
                  "FIREBASE_CONFIG_PATH": "src/main/resources/$(firebaseConfigFileName)",
                  "JAVA_OPTS": "-Duser.timezone=UTC"
                }
            displayName: 'Deploy Spring Boot app to Azure App Service'
